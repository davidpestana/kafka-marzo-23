/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.curso.kafka.avro.model;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Datos extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1532690843717451447L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Datos\",\"namespace\":\"com.curso.kafka.avro.model\",\"fields\":[{\"name\":\"temp\",\"type\":\"float\"},{\"name\":\"presion\",\"type\":\"int\"},{\"name\":\"humedad\",\"type\":\"int\"},{\"name\":\"tempMin\",\"type\":\"float\"},{\"name\":\"tempMax\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Datos> ENCODER =
      new BinaryMessageEncoder<Datos>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Datos> DECODER =
      new BinaryMessageDecoder<Datos>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Datos> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Datos> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Datos> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Datos>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Datos to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Datos from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Datos instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Datos fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private float temp;
   private int presion;
   private int humedad;
   private float tempMin;
   private float tempMax;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Datos() {}

  /**
   * All-args constructor.
   * @param temp The new value for temp
   * @param presion The new value for presion
   * @param humedad The new value for humedad
   * @param tempMin The new value for tempMin
   * @param tempMax The new value for tempMax
   */
  public Datos(java.lang.Float temp, java.lang.Integer presion, java.lang.Integer humedad, java.lang.Float tempMin, java.lang.Float tempMax) {
    this.temp = temp;
    this.presion = presion;
    this.humedad = humedad;
    this.tempMin = tempMin;
    this.tempMax = tempMax;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return temp;
    case 1: return presion;
    case 2: return humedad;
    case 3: return tempMin;
    case 4: return tempMax;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: temp = (java.lang.Float)value$; break;
    case 1: presion = (java.lang.Integer)value$; break;
    case 2: humedad = (java.lang.Integer)value$; break;
    case 3: tempMin = (java.lang.Float)value$; break;
    case 4: tempMax = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'temp' field.
   * @return The value of the 'temp' field.
   */
  public float getTemp() {
    return temp;
  }


  /**
   * Sets the value of the 'temp' field.
   * @param value the value to set.
   */
  public void setTemp(float value) {
    this.temp = value;
  }

  /**
   * Gets the value of the 'presion' field.
   * @return The value of the 'presion' field.
   */
  public int getPresion() {
    return presion;
  }


  /**
   * Sets the value of the 'presion' field.
   * @param value the value to set.
   */
  public void setPresion(int value) {
    this.presion = value;
  }

  /**
   * Gets the value of the 'humedad' field.
   * @return The value of the 'humedad' field.
   */
  public int getHumedad() {
    return humedad;
  }


  /**
   * Sets the value of the 'humedad' field.
   * @param value the value to set.
   */
  public void setHumedad(int value) {
    this.humedad = value;
  }

  /**
   * Gets the value of the 'tempMin' field.
   * @return The value of the 'tempMin' field.
   */
  public float getTempMin() {
    return tempMin;
  }


  /**
   * Sets the value of the 'tempMin' field.
   * @param value the value to set.
   */
  public void setTempMin(float value) {
    this.tempMin = value;
  }

  /**
   * Gets the value of the 'tempMax' field.
   * @return The value of the 'tempMax' field.
   */
  public float getTempMax() {
    return tempMax;
  }


  /**
   * Sets the value of the 'tempMax' field.
   * @param value the value to set.
   */
  public void setTempMax(float value) {
    this.tempMax = value;
  }

  /**
   * Creates a new Datos RecordBuilder.
   * @return A new Datos RecordBuilder
   */
  public static com.curso.kafka.avro.model.Datos.Builder newBuilder() {
    return new com.curso.kafka.avro.model.Datos.Builder();
  }

  /**
   * Creates a new Datos RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Datos RecordBuilder
   */
  public static com.curso.kafka.avro.model.Datos.Builder newBuilder(com.curso.kafka.avro.model.Datos.Builder other) {
    if (other == null) {
      return new com.curso.kafka.avro.model.Datos.Builder();
    } else {
      return new com.curso.kafka.avro.model.Datos.Builder(other);
    }
  }

  /**
   * Creates a new Datos RecordBuilder by copying an existing Datos instance.
   * @param other The existing instance to copy.
   * @return A new Datos RecordBuilder
   */
  public static com.curso.kafka.avro.model.Datos.Builder newBuilder(com.curso.kafka.avro.model.Datos other) {
    if (other == null) {
      return new com.curso.kafka.avro.model.Datos.Builder();
    } else {
      return new com.curso.kafka.avro.model.Datos.Builder(other);
    }
  }

  /**
   * RecordBuilder for Datos instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Datos>
    implements org.apache.avro.data.RecordBuilder<Datos> {

    private float temp;
    private int presion;
    private int humedad;
    private float tempMin;
    private float tempMax;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.curso.kafka.avro.model.Datos.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.temp)) {
        this.temp = data().deepCopy(fields()[0].schema(), other.temp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.presion)) {
        this.presion = data().deepCopy(fields()[1].schema(), other.presion);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.humedad)) {
        this.humedad = data().deepCopy(fields()[2].schema(), other.humedad);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tempMin)) {
        this.tempMin = data().deepCopy(fields()[3].schema(), other.tempMin);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.tempMax)) {
        this.tempMax = data().deepCopy(fields()[4].schema(), other.tempMax);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Datos instance
     * @param other The existing instance to copy.
     */
    private Builder(com.curso.kafka.avro.model.Datos other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.temp)) {
        this.temp = data().deepCopy(fields()[0].schema(), other.temp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.presion)) {
        this.presion = data().deepCopy(fields()[1].schema(), other.presion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.humedad)) {
        this.humedad = data().deepCopy(fields()[2].schema(), other.humedad);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tempMin)) {
        this.tempMin = data().deepCopy(fields()[3].schema(), other.tempMin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tempMax)) {
        this.tempMax = data().deepCopy(fields()[4].schema(), other.tempMax);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'temp' field.
      * @return The value.
      */
    public float getTemp() {
      return temp;
    }


    /**
      * Sets the value of the 'temp' field.
      * @param value The value of 'temp'.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder setTemp(float value) {
      validate(fields()[0], value);
      this.temp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'temp' field has been set.
      * @return True if the 'temp' field has been set, false otherwise.
      */
    public boolean hasTemp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'temp' field.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder clearTemp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'presion' field.
      * @return The value.
      */
    public int getPresion() {
      return presion;
    }


    /**
      * Sets the value of the 'presion' field.
      * @param value The value of 'presion'.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder setPresion(int value) {
      validate(fields()[1], value);
      this.presion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'presion' field has been set.
      * @return True if the 'presion' field has been set, false otherwise.
      */
    public boolean hasPresion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'presion' field.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder clearPresion() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'humedad' field.
      * @return The value.
      */
    public int getHumedad() {
      return humedad;
    }


    /**
      * Sets the value of the 'humedad' field.
      * @param value The value of 'humedad'.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder setHumedad(int value) {
      validate(fields()[2], value);
      this.humedad = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'humedad' field has been set.
      * @return True if the 'humedad' field has been set, false otherwise.
      */
    public boolean hasHumedad() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'humedad' field.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder clearHumedad() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tempMin' field.
      * @return The value.
      */
    public float getTempMin() {
      return tempMin;
    }


    /**
      * Sets the value of the 'tempMin' field.
      * @param value The value of 'tempMin'.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder setTempMin(float value) {
      validate(fields()[3], value);
      this.tempMin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tempMin' field has been set.
      * @return True if the 'tempMin' field has been set, false otherwise.
      */
    public boolean hasTempMin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tempMin' field.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder clearTempMin() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tempMax' field.
      * @return The value.
      */
    public float getTempMax() {
      return tempMax;
    }


    /**
      * Sets the value of the 'tempMax' field.
      * @param value The value of 'tempMax'.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder setTempMax(float value) {
      validate(fields()[4], value);
      this.tempMax = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tempMax' field has been set.
      * @return True if the 'tempMax' field has been set, false otherwise.
      */
    public boolean hasTempMax() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tempMax' field.
      * @return This builder.
      */
    public com.curso.kafka.avro.model.Datos.Builder clearTempMax() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Datos build() {
      try {
        Datos record = new Datos();
        record.temp = fieldSetFlags()[0] ? this.temp : (java.lang.Float) defaultValue(fields()[0]);
        record.presion = fieldSetFlags()[1] ? this.presion : (java.lang.Integer) defaultValue(fields()[1]);
        record.humedad = fieldSetFlags()[2] ? this.humedad : (java.lang.Integer) defaultValue(fields()[2]);
        record.tempMin = fieldSetFlags()[3] ? this.tempMin : (java.lang.Float) defaultValue(fields()[3]);
        record.tempMax = fieldSetFlags()[4] ? this.tempMax : (java.lang.Float) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Datos>
    WRITER$ = (org.apache.avro.io.DatumWriter<Datos>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Datos>
    READER$ = (org.apache.avro.io.DatumReader<Datos>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeFloat(this.temp);

    out.writeInt(this.presion);

    out.writeInt(this.humedad);

    out.writeFloat(this.tempMin);

    out.writeFloat(this.tempMax);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.temp = in.readFloat();

      this.presion = in.readInt();

      this.humedad = in.readInt();

      this.tempMin = in.readFloat();

      this.tempMax = in.readFloat();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.temp = in.readFloat();
          break;

        case 1:
          this.presion = in.readInt();
          break;

        case 2:
          this.humedad = in.readInt();
          break;

        case 3:
          this.tempMin = in.readFloat();
          break;

        case 4:
          this.tempMax = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










